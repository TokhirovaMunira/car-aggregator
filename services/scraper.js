const axios = require('axios');
const pool = require('./db'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const https = require('https');
const cheerio = require('cheerio');
const agent = new https.Agent({ keepAlive: true });
const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const input = require('input'); // –î–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)

const apiId = 21634824; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à api_id
const apiHash = '7a0cd899cc30ff4274cd91dff3f778ec'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à api_hash
const channelUsername = 'AvtoUz_bozor01'; // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª

const session = new StringSession(''); // –û—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç–æ–π –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
const client = new TelegramClient(session, apiId, apiHash, {
  connectionRetries: 5,
});

async function scrapeOlx() {
  const limit = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –∑–∞–ø—Ä–æ—Å
  let offset = 0;
  let hasMore = true;
  let finish = 0;
  const maxIterations = 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
  let iterationCount = 0;

  try {
    while (hasMore) {
      iterationCount += 1;

      if (iterationCount > maxIterations) {
        console.error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.');
        break;
      }

      const url = `https://www.olx.uz/api/v1/offers/?offset=${offset}&limit=${limit}&category_id=108`;
      const response = await axios.get(url, { httpsAgent: agent });

      if (response.data && response.data.data && response.data.data.length > 0) {
        const cars = response.data.data;

        for (const car of cars) {
          const {
            id,
            url,
            title,
            description,
            params,
            location,
            photos,
          } = car;

          const priceParam = params.find(p => p.key === 'price');
          const price = priceParam ? priceParam.value.converted_value || null : null;
          const priceUsd = priceParam ? priceParam.value.value || null : null;

          const city = location?.city?.name || null;
          const region = location?.region?.name || null;
          const mainPhoto = photos?.[0]?.link.replace('{width}', '800').replace('{height}', '600') || null;

          // –í—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          await pool.query(
            'INSERT INTO public.cars (source, external_id, title, description, price, price_usd, location_city, location_region, url, photo) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT (external_id) DO NOTHING',
            ['olx', id, title, description, price, priceUsd, city, region, url, mainPhoto]
          );
        }

        console.log(`Processed ${cars.length} cars (offset: ${offset})`);
        offset += limit; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        finish += 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫
        await new Promise(resolve => setTimeout(resolve, 2000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      } else {
        console.log('–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞.');
        hasMore = false;
      }
    }
  } catch (error) {
    console.error('Error scraping OLX:', error.message);
  }
}

//avtoelon

async function scrapeAvtoelon() {
  const url = 'https://avtoelon.uz/avto/';

  try {
    const { data: html } = await axios.get(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
      },
    });

    const $ = cheerio.load(html);
    const source = 'avtoelon';

    $('.a-elem').each(async (index, element) => {
      const title = $(element).find('.a-el-info-title').text().trim();
      const priceText = $(element).find('.price').text().trim();
      const locationText = $(element).find('.a-info-text__region').text().trim();
      const url = 'https://avtoelon.uz' + $(element).find('a').attr('href');
      const photo = $(element).find('img.a-elem__image').attr('src');

      // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã)
      const priceUsd = parseInt(priceText.replace(/\D/g, ''), 10) || null;
      const price = null;

      // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã (—É—Å–ª–æ–≤–Ω–æ, –∫—É—Ä—Å 1 USD = 12,000 UZS)
      //const priceUsd = price ? Math.round(price / 12000) : null;

      const location_city = locationText;
      const location_region = null;

      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑ URL
      const external_id = url.split('/').pop();

      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await pool.query(
          `INSERT INTO public.cars (
            source, external_id, title, description, price, price_usd, location_city, location_region, url, photo
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
          ON CONFLICT (external_id) DO NOTHING`,
          [source, external_id, title, null, price, priceUsd, location_city?.trim() || null, location_region?.trim() || null, url, photo]
        );

        //console.log(`Inserted: ${title}`);
      } catch (dbError) {
        console.error('DB Error:', dbError.message);
      }
    });
  } catch (error) {
    console.error('Error scraping Avtoelon:', error.message);
  }
}

//telegram

async function scrapeTelegram() {
  try {
    console.log('Connecting to Telegram...');
    await client.start({
      phoneNumber: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'),
      password: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è):'),
      phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:'),
      onError: (err) => console.error(err),
    });
    console.log('Connected!');

    let hasMore = true;
    let offsetId = 0; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const limit = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –∑–∞–ø—Ä–æ—Å
    const maxIterations = 2; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
    let iterationCount = 0;

    while (hasMore) {
      iterationCount += 1;

      if (iterationCount > maxIterations) {
        console.error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.');
        break;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
      const messages = await client.getMessages(channelUsername, {
        limit,
        offsetId,
      });

      if (messages.length > 0) {
        for (const message of messages) {
          const { id, message: text, date, media } = message;
          try {
            const utf8Message = Buffer.from(text, "utf8").toString();
            var title = utf8Message.split('\n')[0];
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞
            const photoUrl = media
              ? await client.downloadMedia(media, { type: 'document', workers: 1 })
              : null;
            // const priceMatch = text.match(/üí∏: ([0-9.,]+)\$/); // –ò—â–µ–º —Ü–µ–Ω—É
            // const priceUsd = priceMatch ? parseFloat(priceMatch[1].replace(",", "")) : null;

            // const cityMatch = text.match(/‚ñ∂Ô∏è: ([\w\s]+)/); // –ò—â–µ–º –≥–æ—Ä–æ–¥
            // const city = cityMatch ? cityMatch[1].trim() : null;

            const external_id = `telegram_${message.id}`; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑ Telegram ID
            // –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await pool.query(
              `INSERT INTO public.cars (
    source, external_id, title, description, price, price_usd, location_city, location_region, url, photo
  ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
  ON CONFLICT (external_id) DO NOTHING`,
              [
                'telegram',
                id,
                title,
                utf8Message,
                null,
                null,
                null,
                null, // –†–µ–≥–∏–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                null, // URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Telegram
                null,
              ]
            );

          } catch (hello) {
            console.error("–û—à–∏–±–∫–∞: ", hello.message);
          }

          // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
          // const match = text.match(/(.+)\n–¶–µ–Ω–∞: (\d+[.,]?\d*)\s*([A-Za-z–ê-–Ø–∞-—è]+)?\n–ì–æ—Ä–æ–¥: (.+)/);
          // if (match) {
          //   const [, title, priceText, currency, city] = match;
          //   const priceUsd = currency && currency.toLowerCase() === 'usd'
          //     ? parseFloat(priceText.replace(',', '.'))
          //     : null;
          //   const price = priceUsd ? Math.round(priceUsd * 13000) : null; // –£—Å–ª–æ–≤–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UZS

          //   // –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          //   await pool.query(
          //     `INSERT INTO public.cars (
          //       source, external_id, title, description, price, price_usd, location_city, location_region, url, photo
          //     ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
          //     ON CONFLICT (external_id) DO NOTHING`,
          //     [
          //       'telegram',
          //       id,
          //       title.trim(),
          //       text.trim(),
          //       price,
          //       priceUsd,
          //       city.trim(),
          //       null, // –†–µ–≥–∏–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
          //       null, // URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Telegram
          //       photoUrl || null,
          //     ]
          //   );
          // } else {
          //   console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${text}`);
          // }
        }

        console.log(`Processed ${messages.length} messages (offsetId: ${offsetId})`);
        offsetId = messages[messages.length - 1].id; // –û–±–Ω–æ–≤–ª—è–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
      } else {
        console.log('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞.');
        hasMore = false;
      }

      await new Promise(resolve => setTimeout(resolve, 2000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    }
  } catch (error) {
    console.error('Error scraping Telegram:', error.message);
  } finally {
    await client.disconnect();
  }
}

module.exports = { scrapeOlx, scrapeAvtoelon, scrapeTelegram };

//UzumAvto
//scrapeUzumAvto();

// async function scrapeUzumAvto() {
//   const url = 'https://uzumavto.uz/api/v1/user/graphql';
//   let cursor = null; // –î–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
//   const limit = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
//   let finish = 0;

//   try {
//     do {
//       // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
//       const requestBody = {
//         query: `query getFeedList($input: GetFeedListInput!) {
//           getFeedList(input: $input) {
//             items {
//               id
//               title
//               price {
//                 strValue
//                 value
//               }
//               additionalInfo
//               carousel {
//                 items {
//                   origUrl
//                 }
//               }
//               publishInfo
//             }            
//           }
//         }`,
//         variables: {
//           input: {
//             limit,
//             sortKey: 'Default',
//             showCase: 'Default',
//           },
//         },
//       };

//       // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
//       const response = await axios.post(url, requestBody, {
//         headers: {
//           'Content-Type': 'application/json',
//           'Content-Length': '1500',
//           'User-Agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:133.0) Gecko/20100101 Firefox/133.0',
//           'Accept': 'application/json',
//           // 'Accept-Language': 'uz',
//           // 'Accept-Encoding': 'gzip, deflate, br, zstd',
//           'Referer': 'https://webview.uzumavto.uz/',
//           'Origin': 'https://webview.uzumavto.uz',
//           'Pragma': 'no-cache',
//           'Cache-Control': 'no-cache',
//         },
//         httpsAgent: agent,
//       });

//       const data = response.data?.data?.getFeedList;
//       console.error('Response data:', error.response?.data);


//       if (data && data.items) {
//         for (const item of data.items) {
//           const {
//             id,
//             title,
//             price,
//             additionalInfo,
//             carousel,
//             publishInfo,
//           } = item;

//           const mainPhoto = carousel?.items?.[0]?.origUrl || null;
//           const formattedPrice = price?.strValue || null;
//           const rawPrice = price?.value || null;

//           // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
//           await pool.query(
//             `INSERT INTO public.cars (
//               source, external_id, title, description, price, raw_price, location_city, photo
//             ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) ON CONFLICT (external_id) DO NOTHING`,
//             [
//               'uzumavto',
//               id,
//               title,
//               additionalInfo,
//               formattedPrice,
//               rawPrice,
//               publishInfo,
//               mainPhoto,
//             ]
//           );

//           console.log(`Added car: ${title}`);
//         }

//         // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
//         // cursor = data.cursor;
//         finish = finish + 1;
//         await new Promise(resolve => setTimeout(resolve, 2000));
//       } else {
//         console.log('No items found on this page.');
//         break;
//       }
//     } while (cursor && finish<3); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –ø–æ–∫–∞ –µ—Å—Ç—å –∫—É—Ä—Å–æ—Ä
//   } catch (error) {
//     console.error('Error scraping UzumAvto:', error.message);
//   }
// }

// scrapeUzumAvto();